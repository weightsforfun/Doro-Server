buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	//QueryDsl
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	//JACOCO
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	//QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	// swagger dependency
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	implementation "io.springfox:springfox-swagger-ui:3.0.0"

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	// .Decoders, .Keys 메서드
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'io.lettuce:lettuce-core'

	//ModelMapper
	implementation 'org.modelmapper:modelmapper:3.1.0'
	// 알림톡 (Solapi)
	implementation 'net.nurigo:sdk:4.2.9'

	// firebase sdk
	implementation 'com.google.firebase:firebase-admin:6.8.1'
	// okhttp
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'


}


//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

//jacoco 설정
test {
	useJUnitPlatform() // JUnit5를 사용하기 위한 설정
	finalizedBy 'jacocoTestReport' // 추가
}


jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

		// 리포트의 저장 경로를 설정합니다.
		html.destination file("jacoco/jacocoHtml")
	}
	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Application*',
							'**/*Exception*',
							'**/dto/**',
							// ...
					]+Qdomains)
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in "*.QA".."*.QZ") {  // qPattern = "*.QA","*.QB","*.QC", ... "*.QZ"
		Qdomains.add(qPattern + "*")
	}
	violationRules { // 커버리지의 범위와 퍼센테이지를 설정합니다.
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.dto.*',
					// ...
			] + Qdomains
		}
	}
}
